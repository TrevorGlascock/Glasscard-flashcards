{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","CommonComponents/Buttons/CreateDeckBtn.js","CommonComponents/LoadingMessage.js","utils/api/index.js","CommonComponents/Buttons/DeleteButton.js","CommonComponents/Buttons/StudyButton.js","CommonComponents/Buttons/ViewDeckBtn.js","HomePage/DeckListItem.js","HomePage/DeckList.js","HomePage/index.js","CommonComponents/Buttons/AddCardButton.js","CommonComponents/Buttons/EditButton.js","CommonComponents/Breadcrumb.js","Decks/Deck/CardListItem.js","Decks/Deck/CardList.js","Decks/Deck/DeckView.js","Decks/Deck/NotEnoughCards.js","Decks/Deck/StudyCard.js","Decks/Deck/StudyDeck.js","CommonComponents/Forms/FormField.js","CommonComponents/Forms/FormTemplate.js","Decks/Deck/EditDeck.js","Decks/Deck/Cards/NewCard.js","Decks/Deck/Cards/EditCard.js","Decks/Deck/Cards/index.js","Decks/Deck/index.js","Decks/NewDeck.js","Decks/index.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","CreateDeckBtn","to","title","LoadingMessage","role","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","updatedCard","deleteCard","cardId","append","DeleteButton","objToDelete","objType","setDecks","history","useHistory","updateDecks","then","catch","onClick","window","confirm","deleteObject","controller","push","AbortController","abort","handleDelete","StudyButton","path","ViewDeckBtn","DeckListItem","length","description","DeckList","decks","useState","deckList","setDeckList","useEffect","map","key","HomePage","AddCardButton","useRouteMatch","split","slice","join","EditButton","Breadcrumb","navTitles","crumbs","navItems","index","crumb","CardListItem","front","back","CardList","cardList","setCardList","DeckView","setCards","NotEnoughCards","StudyCard","defaultStudyState","flipped","freshView","studyState","setStudyState","StudyDeck","useParams","setDeck","loadCards","FormField","inputType","value","placeholder","formChangeHandler","lableTitle","toUpperCase","concat","htmlFor","rows","onChange","required","type","FormTemplate","objToModify","modifyType","deckName","params","deckViewURL","deckHeading","cancelType","submitType","firstPlaceholder","secondPlaceholder","defaultFormState","formData","setFormData","target","onSubmit","event","preventDefault","createDeck","addDeck","newCard","createCard","addCard","updateDeck","editDeck","updateCard","editCard","EditDeck","NewCard","EditCard","find","Cards","Deck","loadDeck","exact","NewDeck","Decks","Layout","loadDecks","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72f1e6da.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"jumbotron tg-bg-dark\">\r\n      <div className=\"container title\">\r\n        <h1 className=\"display-4\">Glasscard Flashcards</h1>\r\n        <p className=\"lead\">\r\n          A React Flashcard App Developed by Trevor Glascock.\r\n        </p>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h2>Not Found</h2>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction CreateDeckBtn() {\r\n  return (\r\n    <Link className=\"\" to=\"/decks/new\">\r\n      <button className=\"btn btn-info my-2 mb-4\">\r\n        <span\r\n          className=\"oi oi-plus pr-2\"\r\n          title=\"plus\"\r\n          aria-hidden=\"true\"\r\n        ></span>\r\n        Create Deck\r\n      </button>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default CreateDeckBtn;\r\n","import React from \"react\";\r\nfunction LoadingMessage() {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <div className=\"spinner-border text-primary text-center\" role=\"status\">\r\n        <span className=\"sr-only\">Now Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoadingMessage;\r\n","/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\r\nconst API_BASE_URL =\r\n  process.env.API_BASE_URL ||\r\n  \"https://my-json-server.typicode.com/TrevorGlascock/Project_Flashcards\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param deck\r\n *  the deck instance\r\n * @returns {*}\r\n *  a copy of the deck instance with the `cards` property removed.\r\n */\r\nfunction stripCards(deck) {\r\n  const { cards, ...deckWithoutCards } = deck;\r\n  return deckWithoutCards;\r\n}\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @param onCancel\r\n *  default value returned if the fetch is cancelled.\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\r\n\r\nasync function fetchJson(url, options, onCancel) {\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (response.status < 200 || response.status > 399) {\r\n      throw new Error(`${response.status} - ${response.statusText}`);\r\n    }\r\n\r\n    if (response.status === 204) {\r\n      return null;\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    if (error.name !== \"AbortError\") {\r\n      console.error(error.stack);\r\n      throw error;\r\n    }\r\n    return Promise.resolve(onCancel);\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves all existing decks.\r\n * @returns {Promise<[deck]>}\r\n *  a promise that resolves to a possibly empty array of decks saved in the database.\r\n */\r\nexport async function listDecks(signal) {\r\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\r\n  return await fetchJson(url, { signal }, []);\r\n}\r\n\r\n/**\r\n * Saves deck to the database (public/data/db.json).\r\n * There is no validation done on the deck object, any object will be saved.\r\n * @param deck\r\n *  the deck to save, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<deck>}\r\n *  a promise that resolves the saved deck, which will now have an `id` property.\r\n */\r\nexport async function createDeck(deck, signal) {\r\n  const url = `${API_BASE_URL}/decks`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(deck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, {});\r\n}\r\n\r\n/**\r\n * Retrieves the deck with the specified `deckId`\r\n * @param deckId\r\n *  the `id` property matching the desired deck.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<any>}\r\n *  a promise that resolves to the saved deck.\r\n */\r\nexport async function readDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\r\n  return await fetchJson(url, { signal }, {});\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedDeck\r\n *  the deck to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated deck.\r\n */\r\nexport async function updateDeck(updatedDeck, signal) {\r\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(updatedDeck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, updatedDeck);\r\n}\r\n\r\n/**\r\n * Deletes the deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the deck to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves all cards associated with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to a possible empty array of cards.\r\n */\r\nexport async function listCards(deckId, signal) {\r\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\r\n  return await fetchJson(url, { signal }, []);\r\n}\r\n\r\n/**\r\n * Creates a new card associated with the specified `deckId`.\r\n * There is no validation that there is an existing deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param card\r\n *  the card to create, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the new card, which will have an `id` property.\r\n */\r\nexport async function createCard(deckId, card, signal) {\r\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\r\n  // and the card is not related to the deck because the data types of the ID's are different.\r\n  const url = `${API_BASE_URL}/cards`;\r\n  card.deckId = Number(deckId);\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(card),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, card);\r\n}\r\n\r\n/**\r\n * Retrieves the card with the specified `cardId`\r\n * @param cardId\r\n *  the id of the target\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the saved card.\r\n */\r\nexport async function readCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  return await fetchJson(url, { signal }, {});\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedCard\r\n *  the card to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated card.\r\n */\r\nexport async function updateCard(updatedCard, signal) {\r\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedCard),\r\n  };\r\n  return await fetchJson(url, options, updatedCard);\r\n}\r\n\r\n/**\r\n * Deletes the card with the specified `cardId`.\r\n * @param cardId\r\n *  the id of the card to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteCard, deleteDeck, listDecks } from \"../../utils/api\";\r\n\r\nfunction DeleteButton({ objToDelete, objType, setDecks }) {\r\n  const history = useHistory();\r\n  //Event Handler to Delete specified object\r\n  function handleDelete() {\r\n    if (\r\n      window.confirm(\r\n        `Delete this ${objType}?\\n\\nYou will not be able to recover it.`\r\n      )\r\n    ) {\r\n      const controller = new AbortController(); //to abort old requests\r\n      async function deleteObject() {\r\n        //Distinguish the type of delete\r\n        objType === \"deck\"\r\n          ? deleteDeck(objToDelete.id) //deleteDeck if it's a Deck\r\n              .then(() => updateDecks(controller))\r\n              .then(() => history.push(\"\"))\r\n          : deleteCard(objToDelete.id) //deleteCard if it's a Card\r\n              .then(() => updateDecks(controller));\r\n      }\r\n      deleteObject();\r\n      return () => controller.abort(); //cleanup\r\n    }\r\n    //if we cancel, then go home without deleting\r\n    else history.push(\"\");\r\n  }\r\n\r\n  function updateDecks({ signal }) {\r\n    listDecks(signal)\r\n      .then(setDecks)\r\n      .catch((error) => {\r\n        if (error.name !== \"AbortError\") throw error;\r\n      });\r\n  }\r\n\r\n  return (\r\n    <button className=\"btn btn-danger\" onClick={() => handleDelete()}>\r\n      <span\r\n        className=\"oi oi-trash pr-1\"\r\n        title=\"trash\"\r\n        aria-hidden=\"true\"\r\n      ></span>\r\n      Delete\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default DeleteButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction StudyButton({ path }) {\r\n  return (\r\n    <>\r\n      <Link className=\"mr-3\" to={`${path}/study`}>\r\n        <button className=\"btn btn-primary\">\r\n          <span\r\n            className=\"oi oi-book pr-1\"\r\n            title=\"book\"\r\n            aria-hidden=\"true\"\r\n          ></span>\r\n          Study\r\n        </button>\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StudyButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction ViewDeckBtn({ path }) {\r\n  return (\r\n    <Link className=\"mr-3\" to={path}>\r\n      <button className=\"btn btn-secondary\">\r\n        <span className=\"oi oi-eye pr-1\" title=\"eye\" aria-hidden=\"true\"></span>\r\n        View\r\n      </button>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default ViewDeckBtn;\r\n","import React from \"react\";\r\nimport DeleteButton from \"../CommonComponents/Buttons/DeleteButton\";\r\nimport StudyButton from \"../CommonComponents/Buttons/StudyButton\";\r\nimport ViewDeckBtn from \"../CommonComponents/Buttons/ViewDeckBtn\";\r\n\r\nfunction DeckListItem({ deck, setDecks }) {\r\n  return (\r\n    <div className=\"list-group-item\">\r\n      <div className=\"row\">\r\n        <div className=\"col-10\">\r\n          <h3 className=\"h3\">{deck.name}</h3>\r\n        </div>\r\n        <div className=\"col\">\r\n          <p className=\"text-muted\">{deck.cards.length} cards</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <p className=\"\">{deck.description}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-between px-3\">\r\n        <div>\r\n          <ViewDeckBtn path={`/decks/${deck.id}`} />\r\n          <StudyButton path={`/decks/${deck.id}`} />\r\n        </div>\r\n        <div>\r\n          <DeleteButton\r\n            objToDelete={deck}\r\n            objType={\"deck\"}\r\n            setDecks={setDecks}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeckListItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CreateDeckBtn from \"../CommonComponents/Buttons/CreateDeckBtn\";\r\nimport LoadingMessage from \"../CommonComponents/LoadingMessage\";\r\nimport DeckListItem from \"./DeckListItem\";\r\n\r\nfunction DeckList({ decks, setDecks }) {\r\n  //useState variable to store an array of DeckListItem components\r\n  const [deckList, setDeckList] = useState([]);\r\n\r\n  //Update deckList whenever there is a change to decks or setDecks\r\n  useEffect(() => {\r\n    //map through every deck in decks to create a DeckListItem for each.\r\n    setDeckList(\r\n      decks.map((deck, key) => (\r\n        <DeckListItem key={key} deck={deck} setDecks={setDecks} />\r\n      ))\r\n    );\r\n  }, [decks, setDecks]);\r\n\r\n  //If there is a deckList, and it has a non-zero length, render it, otherwise show LoadingMessage\r\n  return deckList?.length ? (\r\n    <>\r\n      <CreateDeckBtn />\r\n      <div className=\"list-group\">{deckList}</div>\r\n    </>\r\n  ) : (\r\n    <LoadingMessage />\r\n  );\r\n}\r\n\r\nexport default DeckList;\r\n","import React from \"react\";\r\nimport DeckList from \"./DeckList\";\r\n\r\nfunction HomePage({ decks, setDecks }) {\r\n  return <DeckList decks={decks} setDecks={setDecks} />;\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nfunction AddCardButton() {\r\n  const { url } = useRouteMatch();\r\n  const path = url.split(\"/\").slice(0, 3).join(\"/\");\r\n  return (\r\n    <>\r\n      <Link className=\"mr-3\" to={`${path}/cards/new`}>\r\n        <button className=\"btn btn-info\">\r\n          <span\r\n            className=\"oi oi-plus pr-2\"\r\n            title=\"plus\"\r\n            aria-hidden=\"true\"\r\n          ></span>\r\n          Add Cards\r\n        </button>\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddCardButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction EditButton({ path }) {\r\n  return (\r\n    <>\r\n      <Link className=\"mr-3\" to={`${path}/edit`}>\r\n        <button className=\"btn btn-secondary\">\r\n          <span\r\n            className=\"oi oi-pencil pr-1\"\r\n            title=\"pencil\"\r\n            aria-hidden=\"true\"\r\n          ></span>\r\n          Edit\r\n        </button>\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditButton;\r\n","import React from \"react\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nfunction Breadcrumb({ navTitles }) {\r\n  const { url } = useRouteMatch();\r\n\r\n  //Crumbs is an array of the url elements seperated by the slash\r\n  const crumbs = url ? url.split(\"/\") : [];\r\n\r\n  const navItems = navTitles\r\n    ? navTitles.map((title, index) => {\r\n        //The last item in the navTitles is rendered differently\r\n        if (index === navTitles.length - 1)\r\n          return (\r\n            <li\r\n              key={index}\r\n              className=\"breadcrumb-item active\"\r\n              aria-current=\"page\"\r\n            >\r\n              {title}\r\n            </li>\r\n          );\r\n        //The second navLink will always return to the deck view\r\n        const crumb = crumbs.slice(0, 3).join(\"/\");\r\n        return (\r\n          <li key={index} className=\"breadcrumb-item\">\r\n            <Link to={crumb}>{title}</Link>\r\n          </li>\r\n        );\r\n      })\r\n    : navTitles;\r\n\r\n  //The first navLink will always be a link to HomePage\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to=\"\">\r\n            <span\r\n              className=\"oi oi-home pr-2\"\r\n              title=\"Home\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n            Home\r\n          </Link>\r\n        </li>\r\n        {navItems}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Breadcrumb;\r\n","import React from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport DeleteButton from \"../../CommonComponents/Buttons/DeleteButton\";\r\nimport EditButton from \"../../CommonComponents/Buttons/EditButton\";\r\n\r\n//CardListItem is a template that makes an HTML Card with the correct data to be be displayed\r\nfunction CardListItem({ card, setDecks }) {\r\n  const { url } = useRouteMatch(); //Grab the url for the EditButton's path\r\n  return (\r\n    <div className=\"list-group-item\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <h4 className=\"h4\">Front</h4>\r\n          <p className=\"\">{card.front}</p>\r\n        </div>\r\n        <div className=\"col\">\r\n          <h4 className=\"h4\">Back</h4>\r\n          <p className=\"\">{card.back}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-end\">\r\n        <EditButton path={`${url}/cards/${card.id}`} />\r\n        <DeleteButton objToDelete={card} objType=\"card\" setDecks={setDecks} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardListItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CardListItem from \"./CardListItem\";\r\n\r\nfunction CardList({ cards, setDecks }) {\r\n  //useState variable to store an array of CardListItem components\r\n  const [cardList, setCardList] = useState([]);\r\n\r\n  //Update cardList whenever there is a change to cards or setCards\r\n  useEffect(() => {\r\n    //map through every card in cards to create a CardListItem for each.\r\n    setCardList(\r\n      cards?.map((card, key) => (\r\n        <CardListItem key={key} card={card} setDecks={setDecks} />\r\n      ))\r\n    );\r\n  }, [cards, setDecks]);\r\n\r\n  //Parent component DeckView is handling the LoadingMessage, so just return the list\r\n  return <div className=\"list-group\">{cardList}</div>;\r\n}\r\n\r\nexport default CardList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport AddCardButton from \"../../CommonComponents/Buttons/AddCardButton\";\r\nimport DeleteButton from \"../../CommonComponents/Buttons/DeleteButton\";\r\nimport EditButton from \"../../CommonComponents/Buttons/EditButton\";\r\nimport StudyButton from \"../../CommonComponents/Buttons/StudyButton\";\r\nimport Breadcrumb from \"../../CommonComponents/Breadcrumb\";\r\nimport LoadingMessage from \"../../CommonComponents/LoadingMessage\";\r\nimport CardList from \"./CardList\";\r\n\r\nfunction DeckView({ deck, setDecks }) {\r\n  const { url } = useRouteMatch(); //Grab the url for the for each button's path\r\n\r\n  //cards is a state variable array of each card in the current deck\r\n  const [cards, setCards] = useState([]);\r\n\r\n  //Update cards array whenever there is a change to it's parent Component's deck Object\r\n  useEffect(() => {\r\n    setCards(deck?.cards);\r\n  }, [deck]);\r\n\r\n  return deck?.name && cards ? (\r\n    <>\r\n      <Breadcrumb navTitles={[deck.name]} />\r\n\r\n      <h2 className=\"h2\">{deck.name}</h2>\r\n      <p className=\"tg-text-light\">{deck.description}</p>\r\n\r\n      <div className=\"row justify-content-between mb-5 px-3\">\r\n        <div>\r\n          <EditButton path={url} />\r\n          <StudyButton path={url} />\r\n          <AddCardButton />\r\n        </div>\r\n        <div>\r\n          <DeleteButton objToDelete={deck} objType=\"deck\" setDecks={setDecks} />\r\n        </div>\r\n      </div>\r\n\r\n      <h2 className=\"h2\">Cards</h2>\r\n\r\n      <CardList cards={cards} setDecks={setDecks} />\r\n    </>\r\n  ) : (\r\n    <LoadingMessage />\r\n  );\r\n}\r\n\r\nexport default DeckView;\r\n","import React from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport AddCardButton from \"../../CommonComponents/Buttons/AddCardButton\";\r\n\r\nfunction NotEnoughCards({ cards }) {\r\n  const { url } = useRouteMatch();\r\n  return (\r\n    <>\r\n      <h2>Not enough cards.</h2>\r\n      <p>\r\n        You need at least 3 cards to study. there are {cards.length} cards in\r\n        this deck.\r\n      </p>\r\n      <AddCardButton path={url} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NotEnoughCards;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction StudyCard({ cards }) {\r\n  const history = useHistory();\r\n  const defaultStudyState = { index: 0, flipped: false, freshView: true };\r\n  const [studyState, setStudyState] = useState(defaultStudyState);\r\n\r\n  //On Flip, \"freshView\" becomes false and \"flipped\" becomes the opposite of what it was\r\n  function flipHandler() {\r\n    setStudyState({\r\n      ...studyState,\r\n      flipped: !studyState.flipped,\r\n      freshView: false,\r\n    });\r\n  }\r\n\r\n  //On Next, \"freshView\" becomes true and \"index\" is incremented, unless it's the last card, then we ask to restart\r\n  function nextHandler() {\r\n    if (studyState.index < cards.length - 1)\r\n      setStudyState({\r\n        index: studyState.index + 1,\r\n        flipped: false,\r\n        freshView: true,\r\n      });\r\n    else restartCards();\r\n  }\r\n\r\n  //If user confirms, then we return to the defaultStudyState, otherwise we navigate to the HomePage.\r\n  function restartCards() {\r\n    if (\r\n      window.confirm(\r\n        `Restart cards?\\n\\n Click \"cancel\" to return to the home page`\r\n      )\r\n    )\r\n      setStudyState(defaultStudyState);\r\n    else history.push(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"card tg-bg-light\">\r\n      <div className=\"card-body\">\r\n        <h2 className=\"card-title\">\r\n          {/*Shows user how far into the studySession they are */}\r\n          Card {studyState.index + 1} of {cards.length}\r\n        </h2>\r\n        <p className=\"card-text\">\r\n          {/* if studyState is flipped, we see the back of the current card, otherwise we see the front */}\r\n          {studyState.flipped\r\n            ? cards[studyState.index].back\r\n            : cards[studyState.index].front}\r\n        </p>\r\n        <button className=\"btn btn-secondary mr-3\" onClick={flipHandler}>\r\n          Flip\r\n        </button>\r\n        {/* Next button only appears if it's not a freshView of the card */}\r\n        {studyState.freshView ? null : (\r\n          <button className=\"btn btn-primary mr-3\" onClick={nextHandler}>\r\n            Next\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default StudyCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Breadcrumb from \"../../CommonComponents/Breadcrumb\";\r\nimport LoadingMessage from \"../../CommonComponents/LoadingMessage\";\r\nimport { readDeck } from \"../../utils/api\";\r\nimport NotEnoughCards from \"./NotEnoughCards\";\r\nimport StudyCard from \"./StudyCard\";\r\n\r\nfunction StudyDeck() {\r\n  const { deckId } = useParams(); //Used to grab the \"current\" deck\r\n  const [deck, setDeck] = useState({});\r\n  const cards = deck.cards;\r\n  //Loads the current deck from the API whenever deckId or cards changes\r\n  useEffect(() => {\r\n    const controller = new AbortController(); //to abort old requests\r\n\r\n    //API call to /decks/{deckId}?_embed=cards (All cards embedded in the deck)\r\n    async function loadCards() {\r\n      readDeck(deckId, controller.signal)\r\n        .then(setDeck)\r\n        .catch((error) => {\r\n          if (error.name !== \"AbortError\") throw error;\r\n        });\r\n    }\r\n\r\n    if (!cards) loadCards(); //if there are no cards, load 'em up\r\n    return () => controller.abort(); //cleanup\r\n  }, [deckId, cards]);\r\n\r\n  return cards ? (\r\n    <>\r\n      <Breadcrumb navTitles={[deck?.name, \"Study\"]} />\r\n      <h1 className=\"h1\">Study: {deck?.name}</h1>\r\n      {cards.length < 3 ? (\r\n        <NotEnoughCards cards={cards} />\r\n      ) : (\r\n        <StudyCard cards={cards} />\r\n      )}\r\n    </>\r\n  ) : (\r\n    <LoadingMessage />\r\n  );\r\n}\r\nexport default StudyDeck;\r\n","import React from \"react\";\r\n\r\nfunction FormField({ inputType, name, value, placeholder, formChangeHandler }) {\r\n  const lableTitle = name[0].toUpperCase().concat(name.slice(1)); //Capitalizes the first letter\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label className=\"tg-text-light\" htmlFor={name}>\r\n        {lableTitle}\r\n      </label>\r\n      {/*If the inputType is a text area...*/}\r\n      {inputType === \"textarea\" ? (\r\n        <textarea\r\n          className=\"form-control tg-bg-light\"\r\n          id={name}\r\n          name={name}\r\n          rows=\"4\"\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChange={formChangeHandler}\r\n          required\r\n        />\r\n      ) : (\r\n        /*Else, we are assuming the inputType is text*/\r\n        <input\r\n          className=\"form-control tg-bg-light\"\r\n          id={name}\r\n          name={name}\r\n          type={inputType}\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChange={formChangeHandler}\r\n          required\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormField;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport {\r\n  createCard,\r\n  createDeck,\r\n  listDecks,\r\n  updateCard,\r\n  updateDeck,\r\n} from \"../../utils/api\";\r\nimport FormField from \"./FormField\";\r\n\r\nfunction FormTemplate({\r\n  objToModify,\r\n  objType,\r\n  modifyType,\r\n  deckName,\r\n  decks,\r\n  setDecks,\r\n}) {\r\n  //For the event handlers to navigate\r\n  const history = useHistory();\r\n  const {\r\n    url,\r\n    params: { deckId },\r\n  } = useRouteMatch();\r\n\r\n  //deckView is always the first three segments of the url\r\n  const deckViewURL = url.split(\"/\").slice(0, 3).join(\"/\");\r\n\r\n  //Only add the Deck Name to the heading if the component is given a deckName prop\r\n  const deckHeading = deckName ? `${deckName}: ` : null;\r\n\r\n  //\"Done\" when adding, but \"Cancel\" when editing\r\n  const cancelType = modifyType === \"Add\" ? \"Done\" : \"Cancel\";\r\n  //\"Save\" when adding, but \"Submit\" when editing\r\n  const submitType = modifyType === \"Add\" ? \"Save\" : \"Submit\";\r\n\r\n  //Deck and Card have unique placeholders for each form\r\n  const firstPlaceholder =\r\n    objType === \"Deck\" ? \"Deck Name\" : \"Front side of card\";\r\n  const secondPlaceholder =\r\n    objType === \"Deck\" ? \"Brief description of the deck\" : \"Back side of card\";\r\n\r\n  //Default state is empty when adding, but is the current data when editing.\r\n  const defaultFormState =\r\n    modifyType === \"Add\"\r\n      ? //When Adding...\r\n        objType === \"Deck\"\r\n        ? { name: \"\", description: \"\" } //Add Empty Deck for Deck\r\n        : { front: \"\", back: \"\" } //Add Empty Card for Card\r\n      : //When Editing...\r\n      objType === \"Deck\"\r\n      ? { name: objToModify.name, description: objToModify.description } //Deck name & Description for Deck\r\n      : { front: objToModify.front, back: objToModify.back }; //Card front & back for Card\r\n\r\n  //State control Object that holds key value pair corresponding to each forms input variables\r\n  const [formData, setFormData] = useState(defaultFormState);\r\n\r\n  //Changes the formData Object to be a copy of the existing object, but overrides the name key to be the value user inputted\r\n  const formChangeHandler = ({ target: { name, value } }) => {\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  /************************************************************\r\n   * * * * * * * * * * CANCEL EVENT HANDLER * * * * * * * * * *\r\n   ************************************************************\r\n   * Adding new Deck goes Home\r\n   *\r\n   * Editing old Deck goes to DeckView\r\n   * Adding new card goes to DeckView\r\n   * Editing old card goes to DeckView\r\n   */\r\n  const cancelHandler = () => {\r\n    setFormData(defaultFormState);\r\n    if (objType === \"Deck\" && modifyType === \"Add\") history.push(\"\");\r\n    else history.push(deckViewURL);\r\n  };\r\n\r\n  /*********************************************************************\r\n   * * * * * * * * * * SUBMIT EVENT HANDLER VARIANTS * * * * * * * * * *\r\n   *********************************************************************\r\n\r\n  /***************************\r\n   * * * * * EDITING * * * * *\r\n   ***************************/\r\n  //If editing, we need to make the updateXXX utility API call.\r\n  const editSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    const controller = new AbortController();\r\n    //objType determines if we are editing a Deck or a Card\r\n    objType === \"Deck\" ? editDeck(controller) : editCard(controller);\r\n  };\r\n\r\n  //Editing Deck requires name and description key, as well as the updateDeck utility API call\r\n  function editDeck({ signal }) {\r\n    const newDeck = {\r\n      ...objToModify,\r\n      name: formData.name,\r\n      description: formData.description,\r\n    };\r\n    updateDeck(newDeck, signal).then(() => updateDecks(signal));\r\n  }\r\n\r\n  //Editing Card requires front and back key, as well as the updateCard utility API call\r\n  function editCard({ signal }) {\r\n    const newCard = {\r\n      ...objToModify,\r\n      front: formData.front,\r\n      back: formData.back,\r\n    };\r\n    updateCard(newCard, signal).then(() => updateDecks(signal));\r\n  }\r\n\r\n  /***************************\r\n   * * * * * ADDING * * * * *\r\n   ***************************/\r\n  //If adding, we need to make the createXXX utility API call.\r\n  const addSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    const controller = new AbortController();\r\n    //objType determines if we are adding a Deck or a Card\r\n    objType === \"Deck\" ? addDeck(controller) : addCard(controller);\r\n  };\r\n\r\n  //Adding Deck requires name and description key, as well as the createDeck utility API call\r\n  function addDeck({ signal }) {\r\n    const newDeck = { name: formData.name, description: formData.description };\r\n    createDeck(newDeck, signal).then(() => updateDecks(signal));\r\n  }\r\n\r\n  //Adding Card requires front and back key, as well as the createDeck utility API call\r\n  function addCard({ signal }) {\r\n    const newCard = {\r\n      front: formData.front,\r\n      back: formData.back,\r\n    };\r\n    createCard(deckId, newCard, signal).then(() => updateDecks(signal));\r\n  }\r\n\r\n  /**********************************************************\r\n   * * * * * * * * * * UPDATE DECKS STATE * * * * * * * * * *\r\n   **********************************************************\r\n  /**\r\n   * This function is called in every submit handler.\r\n   * Any time we modify an object,\r\n   * we need to modify the root decks state variable;\r\n   * This ensures everything gets re-rendered after requests\r\n   * */\r\n  function updateDecks(signal) {\r\n    listDecks(signal)\r\n      .then(setDecks)\r\n      .catch((error) => {\r\n        if (error.name !== \"AbortError\") throw error;\r\n      })\r\n      .then(() => {\r\n        //Reset the forms\r\n        setFormData(defaultFormState);\r\n\r\n        //Adding new card goes nowhere\r\n        if (objType === \"Card\" && modifyType === \"Add\") return null;\r\n\r\n        //All other formTypes send the user to deckView\r\n        if (!deckId)\r\n          //if there is no deckId param, it's because we are adding a deck: {BASE_UR:}/decks/new\r\n          //so we can just grab the id of the last deck in decks in the place of the deckId param\r\n          history.push(\r\n            deckViewURL\r\n              .split(\"/\")\r\n              .slice(0, 2)\r\n              .join(\"/\")\r\n              .concat(`/${decks[decks.length - 1].id + 1}`)\r\n          );\r\n        else history.push(deckViewURL);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"h1\">\r\n        {deckHeading}\r\n        {modifyType} {objType}\r\n      </h1>\r\n      <form\r\n        onSubmit={modifyType === \"Add\" ? addSubmitHandler : editSubmitHandler}\r\n      >\r\n        <FormField\r\n          inputType={objType === \"Deck\" ? \"text\" : \"textarea\"}\r\n          name={objType === \"Deck\" ? \"name\" : \"front\"}\r\n          placeholder={firstPlaceholder}\r\n          value={objType === \"Deck\" ? formData.name : formData.front}\r\n          formChangeHandler={formChangeHandler}\r\n        />\r\n        <FormField\r\n          inputType=\"textarea\"\r\n          name={objType === \"Deck\" ? \"description\" : \"back\"}\r\n          placeholder={secondPlaceholder}\r\n          value={objType === \"Deck\" ? formData.description : formData.back}\r\n          formChangeHandler={formChangeHandler}\r\n        />\r\n        <div>\r\n          <button\r\n            className=\"btn btn-secondary mr-2\"\r\n            type=\"button\"\r\n            onClick={cancelHandler}\r\n          >\r\n            {cancelType}\r\n          </button>\r\n          <button className=\"btn btn-primary mr-2\" type=\"submit\">\r\n            {submitType}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\nexport default FormTemplate;\r\n","import React from \"react\";\r\nimport Breadcrumb from \"../../CommonComponents/Breadcrumb\";\r\nimport FormTemplate from \"../../CommonComponents/Forms/FormTemplate\";\r\nimport LoadingMessage from \"../../CommonComponents/LoadingMessage\";\r\n\r\nfunction EditDeck({ deck, setDecks }) {\r\n  return deck?.id ? (\r\n    <>\r\n      <Breadcrumb navTitles={[deck.name, \"Edit Deck\"]} />\r\n      <FormTemplate\r\n        objToModify={deck}\r\n        objType=\"Deck\"\r\n        modifyType=\"Edit\"\r\n        setDecks={setDecks}\r\n      />\r\n    </>\r\n  ) : (\r\n    <LoadingMessage />\r\n  );\r\n}\r\nexport default EditDeck;\r\n","import React from \"react\";\r\nimport Breadcrumb from \"../../../CommonComponents/Breadcrumb\";\r\nimport FormTemplate from \"../../../CommonComponents/Forms/FormTemplate\";\r\nimport LoadingMessage from \"../../../CommonComponents/LoadingMessage\";\r\n\r\nfunction NewCard({ deck, setDecks }) {\r\n  return deck?.id ? (\r\n    <>\r\n      <Breadcrumb navTitles={[deck.name, \"Add Card\"]} />\r\n      <FormTemplate\r\n        objToModify={{}}\r\n        objType=\"Card\"\r\n        modifyType=\"Add\"\r\n        deckName={deck.name}\r\n        setDecks={setDecks}\r\n      />\r\n    </>\r\n  ) : (\r\n    <LoadingMessage />\r\n  );\r\n}\r\n\r\nexport default NewCard;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Breadcrumb from \"../../../CommonComponents/Breadcrumb\";\r\nimport FormTemplate from \"../../../CommonComponents/Forms/FormTemplate\";\r\nimport LoadingMessage from \"../../../CommonComponents/LoadingMessage\";\r\nfunction EditCard({ deck, setDecks }) {\r\n  const { cardId } = useParams();\r\n  const card = deck?.cards?.find((card) => card.id === Number(cardId));\r\n\r\n  return card ? (\r\n    <>\r\n      <Breadcrumb navTitles={[deck.name, `Edit Card ${card.id}`]} />\r\n      <FormTemplate\r\n        objToModify={card}\r\n        objType=\"Card\"\r\n        modifyType=\"Edit\"\r\n        setDecks={setDecks}\r\n      />\r\n    </>\r\n  ) : (\r\n    <LoadingMessage />\r\n  );\r\n}\r\nexport default EditCard;\r\n","import React from \"react\";\r\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\r\nimport NewCard from \"./NewCard\";\r\nimport EditCard from \"./EditCard\";\r\n\r\nfunction Cards({ deck, setDecks }) {\r\n  const { path } = useRouteMatch();\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path={`${path}/:cardId/edit`}>\r\n          <EditCard deck={deck} setDecks={setDecks} />\r\n        </Route>\r\n        <Route path={`${path}/new`}>\r\n          <NewCard deck={deck} setDecks={setDecks} />\r\n        </Route>\r\n        <Route>\r\n          <h1>Not a valid URL!</h1>\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\nexport default Cards;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\r\nimport DeckView from \"./DeckView\";\r\nimport StudyDeck from \"./StudyDeck\";\r\nimport EditDeck from \"./EditDeck\";\r\nimport Cards from \"./Cards\";\r\nimport { readDeck } from \"../../utils/api\";\r\n\r\nfunction Deck({ decks, setDecks }) {\r\n  const {\r\n    path, //Current URL Path\r\n    params: { deckId }, //deckId taken from the path\r\n  } = useRouteMatch();\r\n\r\n  //deck is a state variable that stores the current deck Object\r\n  const [deck, setDeck] = useState([]);\r\n\r\n  //Loads the current Deck from the API on startup\r\n  useEffect(() => {\r\n    const controller = new AbortController(); //to abort old requests\r\n\r\n    //API call to {API_BASE_URL}/decks/deckId/?_embed=cards (All cards embedded in the deck)\r\n    async function loadDeck() {\r\n      readDeck(deckId, controller.signal)\r\n        .then(setDeck)\r\n        .catch((error) => {\r\n          if (error.name !== \"AbortError\") throw error;\r\n        });\r\n    }\r\n\r\n    loadDeck();\r\n    return () => controller.abort(); //cleanup\r\n  }, [deckId, decks]);\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path={`${path}/study`}>\r\n          <StudyDeck />\r\n        </Route>\r\n\r\n        <Route path={`${path}/edit`}>\r\n          <EditDeck deck={deck} setDecks={setDecks} />\r\n        </Route>\r\n\r\n        <Route path={`${path}/cards`}>\r\n          <Cards deck={deck} setDecks={setDecks} />\r\n        </Route>\r\n\r\n        <Route exact path={path}>\r\n          <DeckView deck={deck} setDecks={setDecks} />\r\n        </Route>\r\n\r\n        <Route>\r\n          <h1>Not a valid URL!</h1>\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\nexport default Deck;\r\n","import React from \"react\";\r\nimport Breadcrumb from \"../CommonComponents/Breadcrumb\";\r\nimport FormTemplate from \"../CommonComponents/Forms/FormTemplate\";\r\n\r\nfunction NewDeck({ decks, setDecks }) {\r\n  return (\r\n    <>\r\n      <Breadcrumb navTitles={[\"Create Deck\"]} />\r\n      <FormTemplate\r\n        objToModify={{}}\r\n        objType=\"Deck\"\r\n        modifyType=\"Add\"\r\n        decks={decks}\r\n        setDecks={setDecks}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewDeck;\r\n","import React from \"react\";\r\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\r\nimport Deck from \"./Deck\";\r\nimport NewDeck from \"./NewDeck\";\r\n\r\nfunction Decks({ decks, setDecks }) {\r\n  const { url } = useRouteMatch();\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path={`${url}/new`}>\r\n          <NewDeck decks={decks} setDecks={setDecks} />\r\n        </Route>\r\n        <Route path={`${url}/:deckId`}>\r\n          <Deck decks={decks} setDecks={setDecks} />\r\n        </Route>\r\n        <Route>\r\n          <h1>Not a valid URL!</h1>\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Decks;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport NotFound from \"./NotFound\";\r\nimport HomePage from \"../HomePage\";\r\nimport Decks from \"../Decks\";\r\nimport { listDecks } from \"../utils/api\";\r\n\r\nfunction Layout() {\r\n  //decks is a state variable array of each deck in the API\r\n  const [decks, setDecks] = useState([]);\r\n\r\n  //Loads the list of Decks from the API on startup\r\n  useEffect(() => {\r\n    const controller = new AbortController(); //to abort old requests\r\n\r\n    //API call to {API_BASE_URL}/decks?_embed=cards (All cards embedded in the deck)\r\n    async function loadDecks() {\r\n      listDecks(controller.signal)\r\n        .then(setDecks)\r\n        .catch((error) => {\r\n          if (error.name !== \"AbortError\") throw error;\r\n        });\r\n    }\r\n\r\n    loadDecks();\r\n    return () => controller.abort(); //cleanup\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <HomePage decks={decks} setDecks={setDecks} />\r\n          </Route>\r\n          <Route path=\"/decks/\">\r\n            <Decks decks={decks} setDecks={setDecks} />\r\n          </Route>\r\n          <NotFound />\r\n        </Switch>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router, HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}